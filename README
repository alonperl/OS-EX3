vladi, alonperl
vladi kravtsov (312107139), alon perelmuter (200630887)
EX: 3

FILES:
_____________________________________________________________________
blockchain.cpp
Block.h - A class raised to store the block's content
Block.cpp - The implementation of Block's header.
ChainManager.h - A class that raised to Deal with all the chain issue.
ChainManager.cpp - implementation of the lib functions and the internal
					function , daemon and all other functions. 
					explanation inside.
Makefile - help to the compilations and etc.
README - This file



REMARKS:
A basic explenation for our design :
The general file blockchain library implemented by creating a new 
object of ChainManager, ChainManager raised to store and deal all 
the chain handling, by implementing all the library function and using Block objects to store all the data that needed.
Regarding the implementation that we chose :
We decided to store each block that is created in _allblock
 unordered_map, by key - integer that the id of the block. the value
 was pointer to the Block himself (that been created in add_block func.)
 From this point we understood that we must create more data structurs
 to store waiting\pending blocks, leafs or deepest block in the chain,
 Because we created the map _allBlocks we could create a vectors and 
 lists containing integers representing the block ids, and that was 
 really good and easy soloution. we thought also on shared pointes but
 the implementation was more complicated and we decided to remain with
 the id - block* map.
Regarding all the Mutex handling, we decided to create a mutex to each
datastructures, this gave us the optimal solution by blocking and 
defending double access to the data structures and avoiding crashing.



ANSWERS:
_______________________________________________________________________
TASK 1
=======================================================================
The lib's function add_block choose a father, and not attaching the
block to the chain, after creating the block it push the block to
the waiting list, add_block can be called multiple times while the 
chaining cannot work and even work but in less time. 
while calling multiple time the same father that was chose is given
to all the blocks till the daemon will chain a block and the father
chose will change.
This can be avoid by chain the block in the moment they are created
and only after the daemon thread will hash their data. 

TASK 2
=======================================================================
we need to implement the lib functions and specially the add_block 
to block all and doing this immediately same as attach now does.
the actuall solution is to return the block from acc_block after 
chaining and hashing, and only then to continue adding new blocks.

TASK 3
=======================================================================
Condidions we didnt handle:
We know that there are some holes. we think that "was_attached" can return
a wrong value even before it chained.
We think that the fact that we used alot of mutexes we avoid most of the
crashed that could happened. so no holes is found by us.
